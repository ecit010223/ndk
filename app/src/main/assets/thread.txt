只有在原生方法执行期间及正在执行原生方法的线程环境下局部引用是有效的，局部引用不能在多线程间共享，
只有全局引用可以被多个线程共享。
被传递给每个原生方法的JNIEnv接口指针在与方法调用相关的线程中也是有效的，它不能被其它线程缓存或使用。

1.同步
与Java的同步类似，JNI的监视器允许原生代码利用Java对象同步，虚拟机保证存取监视器的线程能够安全执行，
而其它线程等待监视器对象变化可用状态。
// java同步代码块
synchronized(obj){
    // 同步线程安全代码块
}
在原生代码中，相同级别可以用jni的监视器方法实现。
// java同步代码块的原生等价
if(JNI_OK==env->MonitorEnter(obj)){
    //错误处理
}
// 同步线程安全代码块
if(JNI_OK==env->MonitorExit(obj)){
    //错误处理
}

2.原生线程
与了执行特定任务，这些原生构件可以并行使用原生线程。因为虚拟机不知道原生线程，因此它们不能与
java构件直接通信。为了与应用的依然活跃部分交互，原生线程应该先附着在虚拟机上。
JavaVM* cachedJvm;
// 将当前线程附着到虚拟机上
cacheJvm->AttachCurrentThread(&env,NULL);
// 可以用JNIEnv接口实现线程与Java应用程序的通信
// 将当前线程与虚拟机分离
cachedJvm->DetachCurrentThread();

3.原生代码使用Java线程的优缺点
与使用原生线程相比，原生代码使用Java线程的优点：
(1)更容易建立
(2)原生代码不要求做任何修改
(3)因为Java线程已经是Java平台的一部分，所以不要求显式地附着到虚拟机上，原生代码可以用提供的
   线程专用JNIEnv接口指针与Java代码通信。
(4)通过java.lang.Thread类提供的方法可以用于与Java代码中的线程实例无缝交互。
与使用原生线程相比原生代码使用Java线程有如下不足：
(1)因为原生空间中没有创建Java线程的API，所以假设为线程分配任务的逻辑是Java代码的一部分；
(2)因为基于Java的线程对原生代码是透明的，所以假定原生代码是线程安全的。
(3)原生代码不能获益于其它并发程序的概念或组件，例如信号量等，因为原生空间中没有可供Java线程
   使用的相应API
(4)在不同的线程中运行的原生代码不能通信或直接共享资源。
尽管Java线程中的一些缺点可以通过使用JNI来调用必要的Java API来解决，但由于通过JNI边界是个非常
复杂的操作，所以不提倡使用这个方法。

4.POSIX线程
POSIX线程也被简称为Pthreads，是一个线程的POSIX标准。因为Android是基于Linux操作系统的，所以
它为原生代码提供不一致的POSIX线程实现。POSIX Thread的Android实现是Bionic标准C标准库的一部分。
#include <pthread.h>
//创建线程
int pthread_create(
        pthread_t* thread,
        pthread_attr_t const* attr,
        void* (*start_routine)(void*),
        void* arg)
thread：指向pthread_t类型变量的指针，函数用该指针返回新线程的句柄;
attr：指向pthread_attr_t结构的指针,保存新线程的属性，可以通过该属性指定新线程的栈基址、栈大小、
      守护大小、调度策略和调试优先级等。如果使用默认值，设置为NULL
start_routine：指向线程启动程序的函数指针（表示该线程运行的函数），启动程序函数签名格式为
               void* start_routine (void* args)
arg：传递给线程启动函数的参数，如果不需要传递参数，则设为NULL

5.原生线程依附
由于POSIX线程不是Java平台的一部分，因此虚拟机不能识别它们。为了和Java空间交互，POSIX线程应该先
将自己附着到虚拟机上。为了使POSIX线程正确地附着到虚拟机上，Java虚拟机接口应该为POSIX线程所用。
一旦它们附着到虚拟机上，在POSIX线程上运行的worker代码需要调用java层的函数，将数据回调至UI层。

6.从POSIX线程返回结果
当线程终止时，能返回一个结果，默认情况下，会在线程执行后，启动线程的函数会立即返回。可以将程序修
改成等待线程结束后再返回。
int pthread_join(pthread_t thread, void** ret_val)
thread：线程句柄，它是pthread_create函数返回的目标线程。
ret_val：指向空指针的指针，该指针是为了从启动程序中获取返回值。
它将挂起调用线程的执行，直到目标线程终止。如果ret_val不是NULL，该函数将ret_val指针的值设置为启动
程序的返回结果。如果成功，pthread_join函数返回值是0；否则它将返回错误代码。

7.POSIX线程同步
线程同步机制确保两个并发运行的线程不同时执行代码的特定部分，常用的同步机制如下两个：
(1)互斥锁(Mutexes)确保代码的互斥执行，即代码的特定部分不同时执行。
(2)信号量(Semaphores)控制对特定数目可用资源的访问，如果没有可用资源，调用线程只是在信号量所涉及的
   资源上等待，直到资源可用。
POSIX线程API通过pthread_mutex_t数据类型展示互斥锁到原生代码。POSIX线程API从原生代码提供一组交互
功能的互斥，使用前，互斥变量应该先被初始化。
(1)初始化互斥锁
POSIX线程API提供两种初始化互斥锁的方法：pthread_mutex_init函数和PTHREAD_MUTEX_INITIALIZER宏。
pthread_mutex_init函数被用来初始化互斥锁。
int pthread_mutex_init(pthread_mutex_t* mutex, const pthread_mutexattr_t* attr)
mutext：指向要初始化的互斥变量的指针
attr：指向为互斥锁定义属性的pthread_mutextattr_t
如果attr为NULL，将使用默认属性，如果默认属性够用，PTHREAD_MUTEX_INITIALIZER宏比pthread_mutex_init
更合适。
pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER
如果初始化成功，互斥锁被初始化并处于锁打开的状态，函数返回0，否则返回错误代码。
(2)锁定互斥锁
pthread_mutex_lock函数可以通过对一个已经初始化的互斥锁进行封锁操作达到互斥操作的目的。
int pthread_mutex_lock(pthread_mutex_t* mutex);
该函数带有一个指向互斥锁变量的指针。如果互斥锁已经被锁上，调用线程被挂起直到互斥锁被打
开。如果成功，函数返回0，否则返回错误代码。
(3)解锁互斥锁
在临界区代码执行完成时，可使用pthread_mutex_unlock函数解锁互斥锁。
int pthread_mutex_unlock(pthread_mutex_t* mutex);
该函数还有一个指向要解锁的互斥锁变量指针。调用策略决定解锁后执行哪个等待互斥锁的线程。
如果成功，函数返回0，否则返回错误代码。
(4)销毁互斥锁
一旦不再需要互斥锁，可以用pthread_mutex_destroy函数销毁互斥锁。该函数带有一个指向要
销毁的互斥变量的指针，试图销毁一个锁着的变量将返回不确定结果。
int pthread_mutex_destroy(pthread_mutex_t* mutex);

8.使用信号量同步POSIX线程
#include <semaphore.h>
(1)初始化信号量
extern int sem_init(sem_t* sem,int pshared,unsigned int value)
sem：将被初始化的信号量变量指针
pshared：共享标志
value：初始值
成功返回0，否则返回-1
(2)锁定信号量
一旦信号量被正确地初始化了，线程可以使用sem_wait函数减少信号量的数量。
extern int sem_wait(sem_t* sem)
sem：信号量变量指针，如果信号量的值大于零，上锁成功，并且信号量的值也会相应递减。如果信号
量的值是零，调用线程被挂起，直到另一个线程通过解锁增加信号量的值。
成功返回0，否则返回-1
(3)解锁信号量
extern int sem_post(sem_t* sem)
当使用sem_post函数解锁信号量以后，信号量的值会增加1。调度策略决定信号量解锁后执行哪个等待
线程。
成功返回0，否则返回-1
(4)销毁信号量
extern int sem_destroy(sem_t* sem)
注意：销毁一个另一个线程正在阻塞的信号量有可能导致未知行为。
成功返回0，返回返回-1

9.POSIX的线程调度策略
(1)SCHED_FIFO：先进先出调度策略基于线程进入列表的时间对线程进行排序，也可以基于优先级在列
   表中移动线程。
(2)SCHED_RR：循环轮转调度策略是线程执行时间加以限制的SCHED_FIFO，基目的是避免线程独占可用
   的CPU时间。
可以在用pthread_create函数创建一个新线程时，用线程属性结构pthread_attr_t的sched_policy域
来定义调度策略；也可以在运行时用pthread_setschedparam函数定义调度策略。
int pthread_setschedparam(pthread_t thid,int poilcy,struct sched_param const* param)

10.POSIX thread优先级
POSIX Thread API也提供基于调度策略调整线程优先级的函数。可以在用pthread_create函数创建一
个新线程时，用线程属性结构pthread_attr_t的sched_prority域来定义调度优先级；也可以在运行时
用pthread_setschedparam函数在sched_param结构体中提供优先级。优先级的最大值和最小值的取值
取决于所使用的调度策略，应用程序可以使用sched_get_prority_max函数和sched_get_priority_min
函数查询这些数。