从Android操作系统2.3版本API level 9开始，Android平台也提供一系列原生音频API，使得原生代码可以方便地播放
及记录音频而无须调用java层的任何函数。
Android原生音频支持基于由Khronos Group提供的OpenSL ES 1.0.1标准。OpenSL ES是Open Sound Library for
Embedded System的缩写。

OpenSL ES API通过一系列头文件展示。需要被包含的主要头文件是SLES/Open-SLES.h
#include <SLES/OpenSLES.h>
为了使用Android的扩展功能，源文件中也同样应该包含头文件SLES/OpenSLES_Android.h
#include <SLES/OpenSLES_Android.h>

尽管基于OpenSL ES 1.0.1规范，但Android原生音频API并没有遵循任何OpenSL ES文件的实现。在实现中与Android
相关的部分通过调用Android Extensions API展示。

在音频许可方面，使用原生音频API与使用基于java的音频API没有任何区别，应用程序需要在清单文件申请权限：
需要包含android.permission.RECORD_AUDIO以便创建一个音频录音机
需要包含android.permission.MODIFY_AUDIO_SETTINGS以便改变音频设置及使用音效。

播放WAVE音频文件需要解析WAVE文件，虽然WAVE格式并不十分复杂，但为方便起见，会用一个第三方WAVE库文件来处理
WAVE文件

OpenSL ES原生音频API被设计为以异步方式运行。在整个播放过程中，OpenSL ES引擎将调用一个指定的回调函数来提
供音频数据。该函数需要访问播放器上下文以呈现其功能。PlayerContext结构体用来给已注册的回调提供播放器上下文。
PlayerContext保存有OpenSl ES、WAVLib结构和音频缓冲区。
struct PlayerContext
{
    SLObjectItf engineObject;
    SLEngineItf engineEngine;
    SLObjectItf outputMixObject;
    SLObjectItf audioPlayerObject;
    SLAndroidSimpleBufferQueueItf audioPlayerBufferQueue;
    SLPlayerItf audioPlayerPlay;
    WAV wav;

    unsigned char* buffer;
    size_t bufferSize;
    PlayerContext():
        engineObject(0),
        engineEngine(0),
        outputMixObject(0),
        audioPlayerBufferQueue(0),
        audioPlayerPlay(0),
        wav(0),
        bufferSize(0){}
};