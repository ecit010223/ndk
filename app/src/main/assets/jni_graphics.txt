1.检索Bitmap对象信息
AndroidBitmap_getInfo函数允许原生代码检索Bitmap对象信息，如它的大小、像素格式等。
int AndroidBitmap_getInfo(JNIEnv* env, jobject bitmap, AndroidBitmapInfo* info)
info：该结构返回指定bitmap信息
AndroidBitmap结构体的声明
typedef struct{
    uint32_t width;
    uint32_t height;
    uint32_t stride;
    int32_t format;
    uint32_t flags
} AndroidBitmapInfo;
AndroidBitmapFormat枚举的声明
enum AndroidBitmapFormat{
    ANDROID_BITMAP_FORMAT_NONE      = 0,
    ANDROID_BITMAP_FORMAT_RGBA_8888 = 1,
    ANDROID_BITMAP_FORMAT_RGB_565   = 4,
    ANDROID_BITMAP_FORMAT_RGBA_4444 = 7,
    ANDROID_BITMAP_FORMAT_A_8       = 8,
};
AndroidBitmap_getInfo调用成功返回0，否则返回负数。

2.访问原生像素缓存
AndroidBitmap_lockPixels函数锁定了像素缓存以确保像素的内存不会被移动。如果原生应用程序想要访问像素数据并
操作它，该方法返回了像素缓存的一个原生指针。
int AndroidBitmap_lockPixels(JNIEnv* env, jobject jbitmap, void** addrPtr);
addrPtr：用来返回原生像素缓存的地址。
函数调用成功返回0，否则返回一个负数。

3.释放原生像素缓存
对AndroidBitmap_lockPixels的每次调用都应该对应一次AndroidBitmap_unlockPixels调用，用来释放原生像素缓
存。当完成对原生像素缓存的读写时，原生应用程序应该释放它。一旦释放，Bitmap对象就可以在Java层使用了。
int AndroidBitmap_unlockPixels(JNIEnv* env, jobject jbitmap);
函数调用成功返回0，否则返回负数。
